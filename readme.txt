Files located in / (current directory):

dependencies.sh: Running this shell script updates the system, downloads important python libraries, compiles all the c++ source files in the repository, manifests text files for the game to store data, and installs the necessary font files.

clean.sh: Running this script will remove all the c++ executables and text files. The purpose of this script is to refresh all the data and to allow recompilation.

startup.sh: This script ensures that the GUI display is properly initialized and starts the game application by calling “python3 app.py”.

install.sh: This script is meant to be run as a super user with the “sudo” command in a Linux terminal. It handles setting up all necessary components using the clean.sh, dependencies.sh, and startup.sh. 

README.md: This file contains the instruction to run the game for the first time.


Files located in backend/: 

backend.cpp: Acts as a buffer between the front-end and the back-end. The backend.cpp takes in one core argument, either to call the color generator module or the scoreboard module.

score_board/sb_generator.cpp: The sb_generator is responsible for adding, removing, and rearranging the data inside the scoreboard. 

color_rand_gen/color_generator.cpp: As the name implies, this file generates a 3x3 matrix style pattern of random colors to display it on the screen. The code uses system’s clock as seed to generate close to true random (Thus, pattern repetition is unlikely).

color_rand_gen/color_pattern.txt: The color_pattern.txt stores the current game’s pattern configuration in the form of 9 letter string, each representing a button on the terminal.

color_rand_gen/correct_color.txt: The correct_color.txt stores a randomly picked letter from the word “rgb” generated by color_generator.cpp. This color will be used by the frontend to tally user’s round score.


Files located in gui-app/:

gui-app/app.py: This file serves to spawn the main process of the graphical user interface. The user can cycle between different screens defined as of class Model in the model/model.py file, where the declarations of visual objects live. 

gui-app/ble.py: This file contains information about communicating with the Adafruit microcontroller unit. The code to scan for a connection to the MCU is called in the gui-app/app.py file and declared here. 

gui-app/gui.py: This file creates the baseline visual elements for the graphical user interface.


Files located in gui-app/model:

gui-app/model/model.py: This file creates the Model class, the framework for each individual screen to inherit from, and contains methods to display the Model’s visual elements on the main Canvas elements.

gui-app/model/menus.py: This file contains classes that inherit from the user-defined Model class that represent different screens, or stages, of the graphical user interface.

gui-app/model/mem.py: This file is the first of three separate files that contain the logic and displayed elements for the memory game.

gui-app/model/tic.py: This file supports functionality for a tic-tac-toe game mode, either against another user if multiplayer is enabled or against a bot.

gui-app/model/pig.py: This file contains the display logic for the pig dice game mode.


Files located in gui-app/utils:

util/color.py: This file contains the colors that are used in configuring items in the graphical user interface. The ColorDict data structure is responsible for converting the received color string to a color recognizable by itemconfig. 

util/config.py: In this file, the code to configure the various elements of the graphical user interface exists.

util/path.py: This file contains the paths of the files that are utilized in the operation of the graphical user interface.

util/player.py: This file contains code to carry out operations with data specific to each player. 

util/timer.py: This file contains code to measure runtimes of certain asynchronous functions for testing purposes.

Files located in wireless_controller/:

wirless_controller/wireless_controller.ino: This file is the main Arduino sketch for the MCU control. It handles initialization steps, callbacks for BLE RX data, polling of switch inputs, and handling of the deep sleep power functionality

wireless_controller/dispatch.cpp: This file contains the dispatch functions called in the BLE RX callback.

wireless_controller/common.h: The common header file includes all necessary libraries for BLE, SPI, and avr utilities.
